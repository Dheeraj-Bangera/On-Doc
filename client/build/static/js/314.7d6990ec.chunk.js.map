{"version":3,"file":"static/js/314.7d6990ec.chunk.js","mappings":"qOA6KA,EAxKkB,WAChB,OAAoDA,EAAAA,EAAAA,WAAS,GAAM,eAA5DC,EAAkB,KAAEC,EAAqB,KAChD,GAA4CF,EAAAA,EAAAA,UAAS,MAAK,eAAnDG,EAAc,KAAEC,EAAiB,KACxC,GAAoCJ,EAAAA,EAAAA,WAAS,GAAM,eAA5CK,EAAU,KAAEC,EAAa,KAChC,GAA0CN,EAAAA,EAAAA,UAAS,IAAG,eAA/CO,EAAa,KAAEC,EAAgB,KACtC,GAAwDR,EAAAA,EAAAA,UAAS,IAAG,eAA7DS,EAAoB,KAAEC,EAAuB,KACpD,GAA0BV,EAAAA,EAAAA,UAAS,IAAG,eAA/BW,EAAK,KAAEC,EAAQ,MACLC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRC,IACAC,IACAC,GACF,GAAG,IAGH,IAAMF,EAA4B,WAC5BG,UAAUC,YACZD,UAAUC,YAAYC,oBACpB,SAACC,GACC,MAAgCA,EAASC,OAAjCC,EAAQ,EAARA,SAAUC,EAAS,EAATA,UAClBpB,EAAkB,CAAEmB,SAAAA,EAAUC,UAAAA,IAC9BtB,GAAsB,EACxB,IACA,SAACuB,GACCC,QAAQD,MAAM,0BAA2BA,GACzCvB,GAAsB,EACxB,KAGFwB,QAAQD,MAAM,iDACdvB,GAAsB,GAE1B,EAGMc,EAAgB,WACpB,IAAMW,EAAQC,aAAaC,QAAQ,SACnCvB,IAAgBqB,EAClB,EAGMV,EAAa,WACjB,IAAMa,EAAWC,aAAY,WAC3BnB,GAAS,SAACoB,GAAS,OAAKA,EAAY,CAAC,GACvC,GAAG,KAEHC,YAAW,WACTC,cAAcJ,GACV7B,EACEI,EACF8B,KAEAC,IACAC,MAAM,mCAGJhC,EACFiC,IAGA5B,EAAwB,MAG9B,GAAG,IACL,EAGMyB,EAAyB,yCAAG,4GAGxBI,EAAAA,EAAAA,KAAW,0BAA2B,CAC1ChB,SAAUpB,EAAeoB,SACzBC,UAAWrB,EAAeqB,YACzB,KAAD,iDAEFE,QAAQD,MAAM,wCAAwC,EAAD,IAAS,wDAEjE,kBAV8B,mCAazBa,EAAgB,yCAAG,mFAIrB,OAJqB,SAGN,SACf,SACMC,EAAAA,EAAAA,KAAW,wBAAyB,CAAEC,OAF7B,WAEuC,KAAD,iDAErDd,QAAQD,MAAM,yBAAyB,EAAD,IAAS,wDAElD,kBATqB,mCAYhBW,EAAkB,yCAAG,4GAGjBG,EAAAA,EAAAA,KAAW,0BAA2B,CAC1ChB,SAAUpB,EAAeoB,SACzBC,UAAWrB,EAAeqB,YACzB,KAAD,iDAEFE,QAAQD,MAAM,0BAA0B,EAAD,IAAS,wDAEnD,kBAVuB,mCAyBxB,OACE,iCACE,iBAAKgB,UAAU,UAAS,WACtB,SAAC,KAAO,CAACC,GAAI,IAAKD,UAAU,MAAK,SAAC,UAGhCpC,IACA,SAAC,KAAO,CAACqC,GAAI,SAAUD,UAAU,MAAK,SAAC,cAK3C,oBAASA,UAAU,gCAA+B,UAChD,iBAAKA,UAAU,kCAAiC,WAC9C,wBAAI,0BACJ,yBAAG,mBAAiB9B,EAAM,cACzBV,IACC,gCACGI,IACC,+BACE,mBAAQsC,QAASR,EAA2BM,UAAU,MAAK,SAAC,qBAQ/DhC,IACC,yBAAG,0BAAwBA,MAE7B,4BACE,wBAAI,sBACJ,qBACEmC,MAAOrC,EACPsC,SA/CY,SAACC,GAC3BtC,EAAiBsC,EAAEC,OAAOH,MAC5B,EA8CgBI,YAAY,wCAEd,mBAAQL,QA7CM,WAG1BN,MAAM,2BAAD,OAA4B9B,IACjCC,EAAiB,GACnB,EAwCoDiC,UAAU,MAAK,SAAC,wCAUtE,C","sources":["pages/Emergency.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"../styles/emergency.css\";\r\n\r\nconst Emergency = () => {\r\n  const [locationPermission, setLocationPermission] = useState(false);\r\n  const [clientLocation, setClientLocation] = useState(null);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [doctorMessage, setDoctorMessage] = useState(\"\");\r\n  const [emergencyPhoneNumber, setEmergencyPhoneNumber] = useState(\"\");\r\n  const [timer, setTimer] = useState(10); // Timer set to 10 seconds\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    requestLocationPermission();\r\n    checkLoggedIn();\r\n    startTimer();\r\n  }, []);\r\n\r\n  // Function to request location permission\r\n  const requestLocationPermission = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          setClientLocation({ latitude, longitude });\r\n          setLocationPermission(true);\r\n        },\r\n        (error) => {\r\n          console.error(\"Error getting location:\", error);\r\n          setLocationPermission(false);\r\n        }\r\n      );\r\n    } else {\r\n      console.error(\"Geolocation is not supported by this browser.\");\r\n      setLocationPermission(false);\r\n    }\r\n  };\r\n\r\n  // Function to check if user is logged in\r\n  const checkLoggedIn = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    setIsLoggedIn(!!token);\r\n  };\r\n\r\n  // Function to start timer\r\n  const startTimer = () => {\r\n    const interval = setInterval(() => {\r\n      setTimer((prevTimer) => prevTimer - 1);\r\n    }, 1000);\r\n\r\n    setTimeout(() => {\r\n      clearInterval(interval);\r\n      if (locationPermission) {\r\n        if (isLoggedIn) {\r\n          sendEmergencyNotification();\r\n        } else {\r\n          sendLocationToTeam();\r\n          alert(\"Please log in to start a chat.\");\r\n        }\r\n      } else {\r\n        if (isLoggedIn) {\r\n          sendUserIdToTeam();\r\n        } else {\r\n          // give an option to call 108\r\n          setEmergencyPhoneNumber(\"108\");\r\n        }\r\n      }\r\n    }, 10000); // 10 seconds\r\n  };\r\n\r\n  // Function to send emergency notification to doctor\r\n  const sendEmergencyNotification = async () => {\r\n    try {\r\n      // Send location to backend\r\n      await axios.post(\"/emergency/sendLocation\", {\r\n        latitude: clientLocation.latitude,\r\n        longitude: clientLocation.longitude,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error sending emergency notification:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to send user id to team\r\n  const sendUserIdToTeam = async () => {\r\n    try {\r\n      // Send user id to backend\r\n      const userId = \"123456\"; //\r\n      // Send userId to backend\r\n      await axios.post(\"/emergency/sendUserId\", { userId });\r\n    } catch (error) {\r\n      console.error(\"Error sending user id:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to send location to team\r\n  const sendLocationToTeam = async () => {\r\n    try {\r\n      // Send location to backend\r\n      await axios.post(\"/emergency/sendLocation\", {\r\n        latitude: clientLocation.latitude,\r\n        longitude: clientLocation.longitude,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error sending location:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to handle doctor's message to the client\r\n  const handleDoctorMessage = (e) => {\r\n    setDoctorMessage(e.target.value);\r\n  };\r\n\r\n  // Function to send message from doctor to client\r\n  const sendMessageToClient = () => {\r\n    // Logic to send message to client\r\n    // You can use any messaging service or backend API here\r\n    alert(`Message sent to client: ${doctorMessage}`);\r\n    setDoctorMessage(\"\"); // Clear message input after sending\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"top-bar\">\r\n        <NavLink to={\"/\"} className=\"btn\">\r\n          Home\r\n        </NavLink>\r\n        {!isLoggedIn && (\r\n          <NavLink to={\"/login\"} className=\"btn\">\r\n            Login\r\n          </NavLink>\r\n        )}\r\n      </div>\r\n      <section className=\"emergency-section flex-center\">\r\n        <div className=\"emergency-container flex-center\">\r\n          <h2>Emergency Assistance</h2>\r\n          <p>Time remaining: {timer} seconds</p>\r\n          {locationPermission && (\r\n            <>\r\n              {isLoggedIn && (\r\n                <>\r\n                  <button onClick={sendEmergencyNotification} className=\"btn\">\r\n                    Call Emergency\r\n                  </button>\r\n                  {/* <button onClick={navigateToChat} className=\"btn\">\r\n                    Start Chat\r\n                  </button> */}\r\n                </>\r\n              )}\r\n              {emergencyPhoneNumber && (\r\n                <p>Call emergency number: {emergencyPhoneNumber}</p>\r\n              )}\r\n              <div>\r\n                <h3>Doctor's Console</h3>\r\n                <textarea\r\n                  value={doctorMessage}\r\n                  onChange={handleDoctorMessage}\r\n                  placeholder=\"Type your message to the client...\"\r\n                />\r\n                <button onClick={sendMessageToClient} className=\"btn\">\r\n                  Send Message to Client\r\n                </button>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Emergency;\r\n"],"names":["useState","locationPermission","setLocationPermission","clientLocation","setClientLocation","isLoggedIn","setIsLoggedIn","doctorMessage","setDoctorMessage","emergencyPhoneNumber","setEmergencyPhoneNumber","timer","setTimer","useNavigate","useEffect","requestLocationPermission","checkLoggedIn","startTimer","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","console","token","localStorage","getItem","interval","setInterval","prevTimer","setTimeout","clearInterval","sendEmergencyNotification","sendLocationToTeam","alert","sendUserIdToTeam","axios","userId","className","to","onClick","value","onChange","e","target","placeholder"],"sourceRoot":""}